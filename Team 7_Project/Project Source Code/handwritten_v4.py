# -*- coding: utf-8 -*-
"""Handwritten_v4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kPYfYZZUGK24o7yr7eoQY2itgj3qnyDZ
"""

from google.colab import drive 
drive.mount('/content/gdrive')

import math
import numpy as np
import pandas as pd
import h5py
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.python.framework import ops
from sklearn.externals import joblib
# %matplotlib inline

np.random.seed(1)

train=pd.read_csv('/content/gdrive/My Drive/Font/A_Z_Handwritten_Data.csv')
test=pd.read_csv('/content/gdrive/My Drive/Font/A_Z_test.csv')

print(train.shape) #Checking the shape of the dataset
print(test.shape)

xdata = train.iloc[:,1:] #Extracting the image data seperately from the data that contains image data and label data together
xdata = np.array(xdata[1:], dtype=np.int) #Converting the data into numpy array
xdata = xdata.T

xtest = np.array(test,dtype=np.int)

print(xdata.shape) #Verifying the shape of the data
print(xtest.shape)

ytest=[0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25]

ytest = np.array(ytest[0:],dtype=np.int)[np.newaxis]

ytest.shape

ytrain=train['0'] #Extracting the labels from the dataset
ytrain = np.array(ytrain[1:], dtype=np.int)[np.newaxis] #Converting the labels into numpy array; 1D array to 2D array
#y

ytrain.shape #Verifying the shape of the labels

classes=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] #defining the character classes
index=9999 #To the check the corresponding character at respective index
print ("y = "+str(ytrain[0,index])+". It's a '"+classes[ytrain[0,index]]+"' character.") #Printing the value of Y(label) and the corresponding character from the class

m_train = xdata.shape[1]
num_px = 28
#Dimension of x =28*28 = 784 = nx
print ("Number of training examples: " + str(m_train))
print ("Each image is of size: (" + str(num_px) + ", " + str(num_px) + ", 3)")
print ("train_x shape: " + str(xdata.shape))
print ("train_y shape: " + str(ytrain.shape))
print ("test_x shape: " + str(xtest.shape))
print ("test_y shape: " + str(ytest.shape))

def convert_to_one_hot(Y, C):
    Y = np.eye(C)[Y.reshape(-1)].T
    return Y

# Reshaping the training and test examples 
train_x_flatten = xdata.reshape(xdata.shape[0], -1).T   # The "-1" makes reshape flatten the remaining dimensions
test_x_flatten = xtest.reshape(xtest.shape[0], -1).T

# Standardize data to have feature values between 0 and 1.
train_x = train_x_flatten/255.
test_x = test_x_flatten/255.

# Convert training and test labels to one hot matrices
ytrain = convert_to_one_hot(ytrain, 26)
ytest = convert_to_one_hot(ytest, 26)

print ("train_x shape: " + str(train_x.shape))
print ("train_y shape: " + str(ytrain.shape))
print ("test_x shape: " + str(test_x.shape))
print ("test_y shape: " + str(ytest.shape))

def create_placeholders(n_x, n_y):
    """
    Creating the placeholders for the tensorflow session.
    n_x -- scalar, size of an image vector (num_px * num_px = 28 * 28 = 784)
    n_y -- scalar, number of classes (from 0 to 25, so -> 26)
    
    X -- placeholder for the data input, of shape [n_x, None] and dtype "float"
    Y -- placeholder for the input labels, of shape [n_y, None] and dtype "float"
    
    We use None because it let's us be flexible on the number of examples used for the placeholders.
    Ex. the number of examples during test/train is different.
    """

    X = tf.placeholder(tf.float32,shape=(n_x,None),name="X")
    Y = tf.placeholder(tf.float32,shape=(n_y,None),name="Y")
    
    return X, Y

def initialize_parameters():
    """
    Initializing the parameters with xavier initializer:
                        W1 : [no. of neurons in 1st layer, no. of input values]
                        b1 : [no. of neurons in 1st layer, 1]
                        W2 : [no. of neurons in 2nd layer, no. of neorons in previous layer(1st layer)]
                        b2 : [no. of neurons in 2nd layer, 1]
                        W3 : [no. of neurons in 3rd layer, no. of neurons in previous layer]
                        b3 : [no. of neurons in 3rd layer, 1]
    
    parameters -- a dictionary of tensors containing W1, b1, W2, b2, W3, b3
    """
    
    tf.set_random_seed(1)                   # so that your "random" numbers match ours
        
    W1 = tf.get_variable("W1", [100,784], initializer = tf.contrib.layers.xavier_initializer(seed = 1))
    b1 = tf.get_variable("b1", [100,1], initializer = tf.zeros_initializer())
    W2 = tf.get_variable("W2", [50,100], initializer = tf.contrib.layers.xavier_initializer(seed = 1))
    b2 = tf.get_variable("b2", [50,1], initializer = tf.zeros_initializer())
    W3 = tf.get_variable("W3", [26,50], initializer = tf.contrib.layers.xavier_initializer(seed = 1))
    b3 = tf.get_variable("b3", [26,1], initializer = tf.zeros_initializer())
    
    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2,
                  "W3": W3,
                  "b3": b3}
    
    return parameters

def forward_propagation(X, parameters):
    """
    the forward propagation for the model: LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SOFTMAX
    
    X -- input dataset placeholder, of shape (input size, number of examples)
    parameters -- python dictionary containing your parameters "W1", "b1", "W2", "b2", "W3", "b3"
                  the shapes are given in initialize_parameters

    Z3 -- the output of the last LINEAR unit
    """
    
    # Retrieving the parameters from the dictionary "parameters" 
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3']
    
    Z1 = tf.add(tf.matmul(W1,X),b1)                                              # Z1 = np.dot(W1, X) + b1
    A1 = tf.nn.relu(Z1)                                                          # A1 = relu(Z1)
    Z2 = tf.add(tf.matmul(W2,A1),b2)                                             # Z2 = np.dot(W2, a1) + b2
    A2 = tf.nn.relu(Z2)                                                          # A2 = relu(Z2)
    Z3 = tf.add(tf.matmul(W3,A2),b3)                                             # Z3 = np.dot(W3,Z2) + b3
    
    return Z3

def compute_cost(Z3, Y):
    """
    Computing the cost 
    
    Z3 -- output of forward propagation (output of the last LINEAR unit), of shape (26, number of examples)
    Y -- "true" labels vector placeholder, same shape as Z3
    
    cost - Tensor of the cost function
    """
    
    # to fit the tensorflow requirement for tf.nn.softmax_cross_entropy_with_logits(...,...)
    logits = tf.transpose(Z3)
    labels = tf.transpose(Y)
    
    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = logits, labels = labels))
    
    return cost

def random_mini_batches(X, Y, mini_batch_size = 64, seed = 0):
    """
    Creating a list of random minibatches from input (X, Y)
    
    X -- input data, of shape (input size, number of examples)
    Y -- true "label" vector of shape (1, number of examples)
    mini_batch_size - size of the mini-batches, integer
    seed -- this is only for the purpose of grading, so that you're "random minibatches are the same as ours.
    
    mini_batches -- list of synchronous (mini_batch_X, mini_batch_Y)
    """
    
    m = X.shape[1]                  # number of training examples
    mini_batches = []
    np.random.seed(seed)
    
    #Shuffle (X, Y)       1st step of creating mini-batch
    permutation = list(np.random.permutation(m))
    shuffled_X = X[:, permutation]
    shuffled_Y = Y[:, permutation].reshape((Y.shape[0],m))

    #Partition (shuffled_X, shuffled_Y)    2nd step of creating mini-batch
    num_complete_minibatches = math.floor(m/mini_batch_size) # number of mini batches of size mini_batch_size in your partitionning
    for k in range(0, num_complete_minibatches):
        mini_batch_X = shuffled_X[:, k * mini_batch_size : k * mini_batch_size + mini_batch_size]
        mini_batch_Y = shuffled_Y[:, k * mini_batch_size : k * mini_batch_size + mini_batch_size]
        mini_batch = (mini_batch_X, mini_batch_Y)
        mini_batches.append(mini_batch)
    
    #Including the last few inputs that dont fit the mini-batch size (last mini-batch < mini_batch_size)
    if m % mini_batch_size != 0:
        mini_batch_X = shuffled_X[:, num_complete_minibatches * mini_batch_size : m]
        mini_batch_Y = shuffled_Y[:, num_complete_minibatches * mini_batch_size : m]
        mini_batch = (mini_batch_X, mini_batch_Y)
        mini_batches.append(mini_batch)
    
    return mini_batches

def model(X_train, Y_train, X_test, Y_test, learning_rate = 0.0001,
          num_epochs = 100, minibatch_size = 32, print_cost = True):
    """
    Implementing the three-layer neural network using Tensorflow: LINEAR->RELU->LINEAR->RELU->LINEAR->SOFTMAX.
    
    X_train -- training set, of shape (input size = 784, number of training examples = 372449)
    Y_train -- test set, of shape (output size = 26, number of training examples = 372449)
    X_test -- training set, of shape (input size = 784, number of training examples = 156)
    Y_test -- test set, of shape (output size = 26, number of test examples = 156)
    learning_rate -- learning rate of the optimization
    num_epochs -- number of epochs of the optimization loop
    minibatch_size -- size of a minibatch
    print_cost -- True to print the cost every 100 epochs
    
    parameters -- parameters learnt by the model. They can then be used to predict.
    """
    
    ops.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables
    tf.set_random_seed(1)                             # to keep consistent results
    seed = 3                                          # to keep consistent results
    (n_x, m) = X_train.shape                          # (n_x: input size, m : number of examples in the train set)
    n_y = Y_train.shape[0]                            # n_y : output size
    costs = []                                        # To keep track of the cost
    
    # Calling create Placeholders of shape (n_x, n_y)
    X, Y = create_placeholders(n_x, n_y)
    
    # calling Initialize parameters to initialize the parameters with xavier initializer
    parameters = initialize_parameters()
    
    #Calling Forward propagation to build the forward propagation in the tensorflow graph
    Z3 = forward_propagation(X, parameters)
    
    #Calling Cost function to add cost function to tensorflow graph
    cost = compute_cost(Z3, Y)
    
    # Backpropagation: Define the tensorflow AdamOptimizer
    optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)
    
    init = tf.global_variables_initializer()

    # Starting the session to compute the tensorflow graph
    with tf.Session() as sess:
        
        sess.run(init)
        
        for epoch in range(num_epochs):
          
            epoch_cost = 0.                       # Defines a cost related to an epoch
            num_minibatches = int(m / minibatch_size) # number of minibatches of size minibatch_size in the train set
            seed = seed + 1
            minibatches = random_mini_batches(X_train, Y_train, minibatch_size, seed)

            for minibatch in minibatches:

                (minibatch_X, minibatch_Y) = minibatch
                
                # Running the session to execute the "optimizer" and the "cost"
                _ , minibatch_cost = sess.run([optimizer,cost],feed_dict={X:minibatch_X, Y:minibatch_Y})
                
                epoch_cost += minibatch_cost / num_minibatches

            # Print the cost every 10 epoch
            if print_cost == True and epoch % 10 == 0:
                print ("Cost after epoch %i: %f" % (epoch, epoch_cost))
            if print_cost == True and epoch % 5 == 0:
                costs.append(epoch_cost)
                
        # plotting the cost graph
        plt.plot(np.squeeze(costs))
        plt.ylabel('cost')
        plt.xlabel('iterations (per tens)')
        plt.title("Learning rate =" + str(learning_rate))
        plt.show()

        #saving the parameters in a variable
        parameters = sess.run(parameters)
        print ("Model (Parameters) has been trained.")

        # Calculating the correct predictions
        correct_prediction = tf.equal(tf.argmax(Z3), tf.argmax(Y))

        # Calculate accuracy on the test set
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))

        print ("Train Accuracy:", accuracy.eval({X: X_train, Y: Y_train}))
        print ("Test Accuracy:", accuracy.eval({X: X_test, Y: Y_test}))
        
        return parameters

parameters = model(xdata, ytrain, xtest, ytest)

import pickle
def save_obj(obj, name ):
    with open(name + '.pkl', 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)
save_obj(parameters, 'parameters404')

import pickle
def load_obj(name ):
    with open(name + '.pkl', 'rb') as f:
        return pickle.load(f)
parameters = load_obj("parameters404")

def predict(X, parameters):
    
    W1 = tf.convert_to_tensor(parameters["W1"])
    b1 = tf.convert_to_tensor(parameters["b1"])
    W2 = tf.convert_to_tensor(parameters["W2"])
    b2 = tf.convert_to_tensor(parameters["b2"])
    W3 = tf.convert_to_tensor(parameters["W3"])
    b3 = tf.convert_to_tensor(parameters["b3"])
    
    params = {"W1": W1,
              "b1": b1,
              "W2": W2,
              "b2": b2,
              "W3": W3,
              "b3": b3}
    
    x = tf.placeholder("float", [784, 1])
    
    z3 = forward_propagation(x, params)
    p = tf.argmax(z3)
    
    with tf.Session() as sess:
        prediction = sess.run(p, feed_dict = {x: X})
        
    return prediction

import scipy
from PIL import Image
from scipy import ndimage

my_image = "capitalP.jpg"

#Image preprocessing to fit the algorithm.
fname = "/content/gdrive/My Drive/Infy/Letters/" + my_image
image = np.array(ndimage.imread(fname, flatten=True))
my_image = scipy.misc.imresize(image, size=(28,28)).reshape((1, 784)).T
my_image_prediction = predict(my_image, parameters)

plt.imshow(image)
print("Your algorithm predicts: y = " + str(classes[np.squeeze(my_image_prediction)]))



